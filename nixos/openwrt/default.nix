{
  pkgs,
  lib,
  config,
  utils,
  ...
}: let
  netns = "openwrt";
in {
  # services.netns = {
  #   enable = true;
  #   names = [netns];
  # };

  # systemd.services."${netns}-netns" = {
  #   bindsTo = ["netns@${netns}.service"];
  #   after = ["netns@${netns}.service"];
  #   serviceConfig.NetworkNamespacePath = "/var/run/netns/${netns}";
  #   path = with pkgs; [
  #     iproute2
  #     util-linux
  #   ];
  #   serviceConfig = {
  #     Type = "oneshot";
  #     RemainAfterExit = "yes";
  #     ExecStart = pkgs.writeShellScript "start-${netns}-netns" ''
  #       # add veth pair connecting dockern namespace to the bridge
  #       nsenter -t 1 -n -- ip link add ${netns}-lan type veth peer name eth0
  #       nsenter -t 1 -n -- ip link add ${netns}-wan type veth peer name eth1
  #       nsenter -t 1 -n -- ip link set eth0 netns ${netns}
  #       nsenter -t 1 -n -- ip link set eth1 netns ${netns}
  #       nsenter -t 1 -n -- ip link set ${netns}-lan master br2
  #       nsenter -t 1 -n -- ip link set ${netns}-wan master br0

  #       # set interfaces up
  #       ip link set eth0 up
  #       nsenter -t 1 -n -- ip link set ${netns}-lan up
  #       ip link set eth1 up
  #       nsenter -t 1 -n -- ip link set ${netns}-wan up
  #     '';
  #     ExecStop = pkgs.writeShellScript "stop-${netns}-netns" ''
  #       ip link set eth0 down
  #       ip link del eth0
  #       ip link set eth1 down
  #       ip link del eth1
  #     '';
  #   };
  # };

  # # Containers
  # virtualisation.oci-containers.containers."openwrt" = {
  #   image = "pharra/openwrt:24.10.3";
  #   capabilities = {
  #     NET_ADMIN = true;
  #     SYS_ADMIN = true;
  #     NET_RAW = true;
  #     NET_BIND_SERVICE = true;
  #     NET_BROADCAST = true;
  #     MKNOD = true;
  #     SYS_PTRACE = true;
  #   };
  #   volumes = [
  #     "/var/lib/openwrt/overlay:/overlay:rw"
  #     # "/dev/disk:/dev/disk:rw"
  #     # "/dev/hugepages:/dev/hugepages:rw"
  #     # "/dev/shm:/dev/shm:rw"
  #     # "/dev/zvol:/dev/zvol:rw"
  #     # "/home/wf/spdk:/home/wf/spdk:rw"
  #     # "/proc:/proc:rw"
  #     # "/var/tmp:/var/tmp:rw"
  #   ];
  #   networks = ["lan" "wan"];
  #   privileged = false;
  #   cmd = ["/sbin/init"];
  #   log-driver = "journald";
  #   # "--network=ns:/var/run/netns/${netns}"
  #   extraOptions = ["--security-opt=seccomp=unconfined" "--no-hosts" "--hostname=openwrt" "--dns=none"];
  # };
  # systemd.services."podman-openwrt" = {
  #   serviceConfig = {
  #     Restart = lib.mkOverride 90 "always";
  #   };
  #   # bindsTo = ["${netns}-netns.service"];
  #   # after = ["${netns}-netns.service"];
  #   partOf = [
  #     "podman-compose-openwrt-root.target"
  #   ];
  #   wantedBy = [
  #     "podman-compose-openwrt-root.target"
  #   ];
  # };

  # # Root service
  # # When started, this will automatically create all resources and start
  # # the containers. When stopped, this will teardown all resources.
  # systemd.targets."podman-compose-openwrt-root" = {
  #   unitConfig = {
  #     Description = "Root target generated by compose2nix.";
  #   };
  #   wantedBy = ["multi-user.target"];
  # };

  # systemd.nspawn = {
  #   openwrt = {
  #     networkConfig = {
  #       Bridge = ["br2" "br0"];
  #     };
  #     filesConfig = {};
  #     execConfig = {
  #       # Boot = true;
  #       PrivateUsers = false;
  #       Hostname = "openwrt";
  #     };
  #   };
  # };

  systemd.network = {
    links = {
      "10-bridge" = {
        matchConfig = {Type = "bridge";};
        linkConfig = {MACAddressPolicy = "none";};
      };
    };
    netdevs = {
      "20-br2" = {
        netdevConfig = {
          Kind = "bridge";
          Name = "br2";
        };
      };
    };
    networks = {
      "40-br2" = {
        matchConfig.Name = "br2";
        bridgeConfig = {};
        networkConfig = {
          # start a DHCP Client for IPv4 Addressing/Routing
          DHCP = "ipv4";
          # accept Router Advertisements for Stateless IPv6 Autoconfiguraton (SLAAC)
          IPv6AcceptRA = true;
          Domains = ["lan"];
          ConfigureWithoutCarrier = true;
        };
        dhcpV4Config = {
          UseDomains = true;
          UseRoutes = false;
        };
        ipv6AcceptRAConfig = {
          UseDNS = true;
          UseDomains = true;
        };
        linkConfig = {
          # or "routable" with IP addresses configured
          ActivationPolicy = "always-up";
          RequiredForOnline = "routable";
        };
      };
    };
  };
}
