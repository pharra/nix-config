# Auto-generated using compose2nix v0.3.3-pre.
{
  pkgs,
  lib,
  config,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."spdk-spdk" = {
    image = "pharra/spdk:v25.09";
    volumes = [
      "/dev/disk:/dev/disk:rw"
      "/dev/hugepages:/dev/hugepages:rw"
      "/dev/shm:/dev/shm:rw"
      "/dev/zvol:/dev/zvol:rw"
      "/home/wf/spdk:/home/wf/spdk:rw"
      "/proc:/proc:rw"
      "/var/tmp:/var/tmp:rw"
    ];
    cmd = ["sh" "-x" "-c" "/usr/local/bin/spdk_tgt -m 0x1 -c /home/wf/spdk/rdma_config.json -S /var/tmp"];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=python3 /usr/libexec/spdk/scripts/rpc.py spdk_get_version || exit 1"
      "--health-interval=6s"
      "--health-retries=5"
      "--health-start-period=20s"
      "--health-timeout=10s"
      "--network=host"
      "--privileged"
    ];
  };
  systemd.services."podman-spdk-spdk" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    partOf = [
      "podman-compose-spdk-root.target"
    ];
    wantedBy = [
      "podman-compose-spdk-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-spdk-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
